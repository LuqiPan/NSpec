grammar NSpec
  # Top level rule
  rule expectation
    expect S actual S prep S match_clause {
      def rewrite
        elements.map do |e|
          (e.respond_to? :rewrite) ? e.rewrite : e.text_value
        end.join
      end
    }
  end

  rule match_clause
    (match_without_be / match_with_be)
  end

  rule match_with_be
    (be_between / be_within / be_truthy / be_falsey / regular_match_with_be)
  end

  rule match_without_be
    (irregular_match_without_be / regular_match_without_be)
  end

  rule irregular_match_without_be
    (existence / raise_error / throw_symbol / predicate / match_expression /
      bound / response)
  end

  # match with be rules
  rule be_between
    be S 'between' S expected S expected S clusivity
  end

  rule clusivity
    'inclusive' / 'exclusive'
  end

  rule be_within
    be S 'within' S numbers S 'of' S expected
  end

  rule be_truthy
    be S 'truthy'
  end

  rule be_falsey
    be S 'falsey'
  end

  rule regular_match_with_be
    (be_equal / be_type_and_class / compare_clause / identity)
  end

  rule be_equal
    be S equal S expected
  end

  rule equal
    ('equal' / 'eql' / 'eq') {
      def rewrite
        " #{text_value}"
      end
    }
  end

  rule compare_clause
    be S compare S expected_no_paren {
      def rewrite
        elements.map do |e|
          (e.respond_to? :rewrite) ? e.rewrite : e.text_value
        end.join
      end
    }
  end

  rule compare
    ('>=' / '<=' / '>' / '<') {
      def rewrite
        " #{text_value} "
      end
    }
  end

  rule be_type_and_class
    be S type_and_class S expected {
      def rewrite
        " be_#{elements[2].rewrite}(#{elements.last.text_value})"
      end
    }
  end

  rule type_and_class
    'instance' S 'of' {
      def rewrite
        "instance_of"
      end
    }
    / 'kind' S 'of' {
      def rewrite
        "kind_of"
      end
    }
  end

  rule identity
    be S expected {
      def rewrite
        " be(#{elements.last.text_value})"
      end
    }
  end
  # END match with be rules

  # match without be rules
  rule existence
    'exist'
  end

  rule raise_error
    'raise' S 'error'
  end

  rule throw_symbol
    'throw' S 'symbol'
  end

  rule predicate
    'have' S variable
  end

  rule match_expression
    match_keyword S expected {
      def rewrite
        " match(#{elements.last.text_value})"
      end
    }
  end

  rule match_keyword
    'match'
  end

  rule bound
    ('start' / 'end') S 'with' S expected {
      def rewrite
        " #{elements.first.text_value}_with #{elements.last.text_value}"
      end
    }
  end

  rule response
    'respond' S 'to' S expected {
      def rewrite
        " respond_to(#{elements.last.text_value})"
      end
    }
  end

  rule regular_match_without_be
    equal S expected {
      def rewrite
        elements.map do |e|
          (e.respond_to? :rewrite) ? e.rewrite : e.text_value
        end.join
      end
    }
  end
  # END match without be rules

  # simple token
  rule expect
    'expect'
  end

  rule prep
    (to / not_to)
  end

  rule be
    'be' {
      def rewrite
        ' be'
      end
    }
  end

  rule actual
    (variable / numbers) {
      def rewrite
        "(#{text_value})"
      end
    }
  end

  rule expected
    variable / numbers {
      def rewrite
        "(#{text_value})"
      end
    }
  end

  rule expected_no_paren
    variable / numbers
  end

  # Preposition
  rule to
    'to' {
      def rewrite
        '.to'
      end
    }
  end

  rule not_to
    'not' S 'to' {
      def rewrite
        '.not_to'
      end
    }
  end

  # Primitives
  rule numbers
    [0-9]+
  end

  rule characters
    [a-zA-Z_]+
  end

  rule variable
    characters+ (characters/numbers)*
  end

  # White spaces
  rule OS #optional spaces
    [ \t]*
  end

  rule S #white spaces
    [ \t]+ {
      def rewrite
        ''
      end
    }
  end
end
